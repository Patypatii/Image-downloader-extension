(() => { let e = [], t = null; document.addEventListener("DOMContentLoaded", () => { const n = document.getElementById("urlInput"), o = document.getElementById("scrapeButton"), c = document.getElementById("loadingIndicator"), a = document.getElementById("loadingMessage"), d = document.getElementById("errorMessage"), l = document.getElementById("mainContent"), s = document.getElementById("imagePreviews"), i = document.getElementById("jsonData"), r = document.getElementById("downloadJsonButton"), m = document.getElementById("reportBugButton"), u = document.getElementById("sortImages"), g = document.getElementById("selectAllButton"), p = document.getElementById("downloadSelectedButton"); function h(e) { l.style.display = "none", c.style.display = "block", a.textContent = e, f() } function y() { c.style.display = "none", a.textContent = "", l.style.display = "block" } function E(e) { d.textContent = e, d.style.display = "block", y() } function f() { d.style.display = "none", d.textContent = "" } function b(e) { document.body.classList.remove("light-theme", "dark-theme"), document.body.classList.add(e + "-theme") } function k() { const e = document.querySelectorAll(".image-checkbox:checked").length; e > 0 ? (p.style.display = "block", p.textContent = `Download Selected (${e})`) : p.style.display = "none" } chrome.storage.sync.get("theme", e => { b(e.theme || "light") }), chrome.runtime.onMessage.addListener((n, o, c) => { return "updateLoading" === n.action ? (h(n.message), c({ success: !0 })) : "scrapedData" === n.action ? (e = n.images, t = n.data, a = e, d = t, s.innerHTML = "", a && a.length > 0 ? (a.forEach(e => { const t = document.createElement("div"); t.classList.add("image-preview-item"); const n = document.createElement("img"); n.src = e, n.alt = "Image preview", n.title = e, n.onerror = () => { n.src = "icons/placeholder.png", n.title = "Image failed to load: " + e }; const o = document.createElement("input"); o.type = "checkbox", o.classList.add("image-checkbox"), o.value = e, o.checked = !0, o.addEventListener("change", k), t.appendChild(n), t.appendChild(o), s.appendChild(t) }), k()) : (s.innerHTML = "<p>No images found on this page, or they could not be scraped. Try a different URL or check options.</p>", p.style.display = "none"), d ? (i.textContent = JSON.stringify(d, null, 2), r.style.display = "block") : (i.textContent = "No structured data available.", r.style.display = "none"), y(), c({ success: !0 })) : "error" === n.action ? (E(n.message), c({ success: !0 })) : "themeChanged" === n.action && (b(n.theme), c({ success: !0 })), !0; var a, d }), o.addEventListener("click", () => { const e = n.value.trim(); h(e ? `Scraping ${e}...` : "Scraping current tab..."), chrome.runtime.sendMessage({ action: "scrapeUrl", url: e }, e => { e && e.success || E(`Failed to initiate scraping: ${e ? e.message : "Unknown error."}`) }) }), u.addEventListener("change", () => { !function (e) { if (!e || 0 === e.length) return; const t = u.value; let n = [...e]; "url-asc" === t ? n.sort((e, t) => e.localeCompare(t)) : "url-desc" === t && n.sort((e, t) => t.localeCompare(e)), function (e) { s.innerHTML = "", e && e.length > 0 ? (e.forEach(e => { const t = document.createElement("div"); t.classList.add("image-preview-item"); const n = document.createElement("img"); n.src = e, n.alt = "Image preview", n.title = e, n.onerror = () => { n.src = "icons/placeholder.png", n.title = "Image failed to load: " + e }; const o = document.createElement("input"); o.type = "checkbox", o.classList.add("image-checkbox"), o.value = e, Array.from(document.querySelectorAll(".image-checkbox")).find(t => t.value === e && t.checked), o.checked = !0, o.addEventListener("change", k), t.appendChild(n), t.appendChild(o), s.appendChild(t) }), k()) : (s.innerHTML = "<p>No images found on this page, or they could not be scraped.</p><p>Try a different URL or check options.</p>", p.style.display = "none") }(n) }(e) }), g.addEventListener("click", () => { const e = document.querySelectorAll(".image-checkbox"), t = Array.from(e).every(e => e.checked); e.forEach(e => e.checked = !t), k() }), p.addEventListener("click", () => { const e = Array.from(document.querySelectorAll(".image-checkbox:checked")).map(e => e.value); 0 !== e.length ? (h(`Initiating ZIP download for ${e.length} images...`), chrome.runtime.sendMessage({ action: "downloadImagesAsZip", urls: e, pageTitle: t ? t.pageTitle : "scraped_images" }, e => { e && e.success || E(`Failed to initiate ZIP download: ${e ? e.message : "Unknown error."}`) })) : E("No images selected for download.") }), r.addEventListener("click", () => { if (t) { const e = JSON.stringify(t, null, 2), n = new Blob([e], { type: "application/json" }), o = URL.createObjectURL(n), c = `${t.pageTitle.replace(/[^a-z0-9]/gi, "_").toLowerCase() || "scraped_data"}.json`; chrome.downloads.download({ url: o, filename: c }, () => { URL.revokeObjectURL(o) }) } else E("No JSON data to download.") }), m.addEventListener("click", () => { const e = encodeURIComponent("Bug Report: Image Scraper Extension"), n = encodeURIComponent(`\n        Please describe the bug you encountered:\n        [Describe bug here]\n\n        Steps to reproduce:\n        1.\n        2.\n        3.\n\n        Expected behavior:\n        Actual behavior:\n\n        Browser: Chrome\n        Extension Version: ${chrome.runtime.getManifest().version}\n         URL (if applicable): ${t ? t.url : "N/A"}\n        `); window.open(`mailto:your.email@example.com?subject=${e}&body=${n}`) }), y(), f() }) })();