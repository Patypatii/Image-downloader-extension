(()=>{let e=[],t=null;document.addEventListener("DOMContentLoaded",()=>{const n=document.getElementById("urlInput"),o=document.getElementById("scrapeButton"),a=document.getElementById("loadingIndicator"),c=document.getElementById("loadingMessage"),s=document.getElementById("errorMessage"),l=document.getElementById("mainContent"),d=document.getElementById("imagePreviews"),r=document.getElementById("jsonData"),i=document.getElementById("downloadJsonButton"),m=document.getElementById("reportBugButton"),u=document.getElementById("sortImages"),g=document.getElementById("selectAllButton"),p=document.getElementById("downloadSelectedButton");function h(e){l.style.display="none",a.style.display="block",c.textContent=e,b()}function y(){a.style.display="none",c.textContent="",l.style.display="block"}function f(e){s.textContent=e,s.style.display="block",y()}function b(){s.style.display="none",s.textContent=""}function E(e){document.body.classList.remove("light-theme","dark-theme"),document.body.classList.add(e+"-theme")}function v(){const e=document.querySelectorAll(".image-checkbox:checked").length;e>0?(p.style.display="block",p.textContent=`Download Selected (${e})`):p.style.display="none"}chrome.storage.sync.get("theme",e=>{E(e.theme||"light")}),chrome.runtime.onMessage.addListener((n,o,a)=>{if("updateLoading"===n.action)h(n.message),a({success:!0});else if("scrapedData"===n.action)e=n.images,t=n.data,c=e,s=t,d.innerHTML="",c&&c.length>0?(c.forEach(e=>{const t=document.createElement("div");t.classList.add("image-preview-item");const n=document.createElement("img");n.src=e,n.alt="Image preview",n.title=e,n.onerror=()=>{n.src="icons/placeholder.png",n.title="Image failed to load: "+e};const o=document.createElement("input");o.type="checkbox",o.classList.add("image-checkbox"),o.value=e,o.checked=!0,o.addEventListener("change",v),t.appendChild(n),t.appendChild(o),d.appendChild(t)}),v()):(d.innerHTML="<p>No images found on this page, or they could not be scraped. Try a different URL or check options.</p>",p.style.display="none"),s?(r.textContent=JSON.stringify(s,null,2),i.style.display="block"):(r.textContent="No structured data available.",i.style.display="none"),y(),a({success:!0});else if("error"===n.action)f(n.message),a({success:!0});else if("themeChanged"===n.action)E(n.theme),a({success:!0});else if("initiateZipDownloadInPopup"===n.action){console.log("Popup: Received request to initiate ZIP download."),h(`Starting download for ${n.filename}...`);const e=n.blob,t=n.filename;if(e){const n=URL.createObjectURL(e);chrome.downloads.download({url:n,filename:t,saveAs:!0},e=>{chrome.runtime.lastError?(console.error(`Download failed: ${chrome.runtime.lastError.message}`),f(`Failed to download ZIP: ${chrome.runtime.lastError.message}`)):(console.log(`Download started (ID: ${e})`),h(`Download of "${t}" started successfully!`),setTimeout(y,3e3)),URL.revokeObjectURL(n),a({success:!0})})}else f("Error: No ZIP blob received for download."),a({success:!1,message:"No ZIP blob received."});return!0}var c,s;return!0}),o.addEventListener("click",()=>{const e=n.value.trim();h(e?`Scraping ${e}...`:"Scraping current tab..."),chrome.runtime.sendMessage({action:"scrapeUrl",url:e},e=>{e&&e.success||f(`Failed to initiate scraping: ${e?e.message:"Unknown error."}`)})}),u.addEventListener("change",()=>{!function(t){if(!t||0===t.length)return;const n=u.value;let o=[...t];"url-asc"===n?o.sort((e,t)=>e.localeCompare(t)):"url-desc"===n&&o.sort((e,t)=>t.localeCompare(e)),function(t){d.innerHTML="",t&&t.length>0?(t.forEach(t=>{const n=document.createElement("div");n.classList.add("image-preview-item");const o=document.createElement("img");o.src=t,o.alt="Image preview",o.title=t,o.onerror=()=>{o.src="icons/placeholder.png",o.title="Image failed to load: "+t};const a=document.createElement("input");a.type="checkbox",a.classList.add("image-checkbox"),a.value=t,a.checked=e.includes(t),a.checked||(a.checked=!0),a.addEventListener("change",v),n.appendChild(o),n.appendChild(a),d.appendChild(n)}),v()):(d.innerHTML="<p>No images found on this page, or they could not be scraped.</p><p>Try a different URL or check options.</p>",p.style.display="none")}(o)}(e)}),g.addEventListener("click",()=>{const e=document.querySelectorAll(".image-checkbox"),t=Array.from(e).every(e=>e.checked);e.forEach(e=>e.checked=!t),v()}),p.addEventListener("click",()=>{const e=Array.from(document.querySelectorAll(".image-checkbox:checked")).map(e=>e.value);0!==e.length?(h(`Initiating ZIP download for ${e.length} images...`),chrome.runtime.sendMessage({action:"downloadImagesAsZip",urls:e,pageTitle:t?t.pageTitle:"scraped_images"},e=>{e&&e.success||f(`Failed to initiate ZIP download: ${e?e.message:"Unknown error."}`)})):f("No images selected for download.")}),i.addEventListener("click",()=>{if(t){const e=JSON.stringify(t,null,2),n=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(n),a=`${t.pageTitle.replace(/[^a-z0-9]/gi,"_").toLowerCase()||"scraped_data"}.json`;chrome.downloads.download({url:o,filename:a},()=>{URL.revokeObjectURL(o)})}else f("No JSON data to download.")}),m.addEventListener("click",()=>{const e=encodeURIComponent("Bug Report: Image Scraper Extension"),n=encodeURIComponent(`\n        Please describe the bug you encountered:\n        [Describe bug here]\n\n        Steps to reproduce:\n        1.\n        2.\n        3.\n\n        Expected behavior:\n        Actual behavior:\n\n        Browser: Chrome\n        Extension Version: ${chrome.runtime.getManifest().version}\n        URL (if applicable): ${t?t.url:"N/A"}\n        `);window.open(`mailto:your.email@example.com?subject=${e}&body=${n}`)}),y(),b()})})();